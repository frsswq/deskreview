---
import Header from "../components/Header.astro";
import ImportFont from "../components/ImportFont.astro";
import Footer from "../components/Footer.astro";
import ScrollbarGutter from "../components/ScrollbarGutter.astro";
import HideScrollbar from "../components/HideSrollbar.astro";
import { ClientRouter } from "astro:transitions";

type Props = {
  pageTitle: string;
  withFooter: boolean;
  bgColor?: string;
};

const { pageTitle, withFooter, bgColor } = Astro.props;
const isWithFooter = withFooter ? "mb-[calc(100vh-52px)]" : "";
---

<!-- classic layout -->
<html lang="en" class={`${bgColor ? bgColor : "bg-desk-white"} scroll-smooth`}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/deskreview/ico/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="author" content="Deskreview" />
    <meta
      name="description"
      content="A Branding and Campaign Strategy Studio."
    />
    <ClientRouter />
    <ImportFont />
    <ScrollbarGutter />
    <HideScrollbar />
    <title>{pageTitle}</title>
  </head>
  <body class={`${bgColor ? bgColor : "bg-desk-white"}`}>
    <Header />
    <main class={`${isWithFooter} min-h-[calc(100vh-52px)]`}>
      <slot />
    </main>
    <Footer withFooter={withFooter} />
  </body>
</html>

<script>
  document.addEventListener("astro:page-load", () => {
    // force page to scroll to top
    // window.scrollTo({ top: 0, behavior: "smooth" });


    // text-reveal on-sight
    const text = document.querySelectorAll(".text-reveal");
    const viewHeight = window.innerHeight * 0.05;
    const observerSettings = {
      root: null,
      rootMargin: `${viewHeight}px 0px`,
      threshold: 0,
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("animate-slidein");
        }
      });
    }, observerSettings);

    text.forEach((item) => {
      observer.observe(item);
    });
  });
</script>
