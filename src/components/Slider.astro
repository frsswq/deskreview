---
import SlideContent from "../components/SlideContent.astro";
---

<div class="overlay hidden" id="overlay"></div>

<div
  id="slide"
  class="ease-[cubic-bezier(0.7, 0, 0.84, 0)] fixed right-0 top-0 z-[60] h-screen
    w-screen translate-x-full overflow-y-auto overscroll-contain bg-desk-black
    transition-transform duration-300 md:w-[50vw] md:duration-500"
>
  <SlideContent />
</div>

<button
  id="x-btn"
  class="fixed right-[40px] top-[40px] z-[60] hidden cursor-pointer items-center
    justify-center rounded-full bg-desk-gray-700 p-6 md:p-8"
>
  <span
    class="absolute top-[50%] block h-[2px] w-4 -translate-y-[50%] rotate-45 transform
      bg-desk-white md:w-6"
  ></span>
  <span
    class="absolute top-[50%] block h-[2px] w-4 -translate-y-[50%] -rotate-45 transform
      bg-desk-white md:w-6"
  ></span>
</button>

<style>
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 55;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .overlay.visible {
    opacity: 1;
    pointer-events: auto;
  }
</style>

<script>
  let isInitialized: boolean = false;

  function initSlidePanel() {
    // Prevent multiple initializations
    if (isInitialized) return;
    isInitialized = true;

    const slide: HTMLElement | null = document.getElementById("slide");
    const xBtn: HTMLElement | null = document.getElementById("x-btn");
    const overlay: HTMLElement | null = document.getElementById("overlay");
    const cardContents: {
      first: HTMLElement | null;
      second: HTMLElement | null;
      third: HTMLElement | null;
    } = {
      first: document.getElementById("first-card-content"),
      second: document.getElementById("second-card-content"),
      third: document.getElementById("third-card-content"),
    };
    const cardButtons: {
      first: HTMLElement | null;
      second: HTMLElement | null;
      third: HTMLElement | null;
    } = {
      first: document.querySelector(".about-card > button:nth-child(1)"),
      second: document.querySelector(".about-card > button:nth-child(3)"),
      third: document.querySelector(".about-card > button:nth-child(4)"),
    };

    if (!slide || !xBtn || !overlay) {
      console.error("Missing essential DOM elements for the slide panel.");
      return;
    }

    // Reset card contents visibility
    const hideCardContents = () => {
      Object.values(cardContents).forEach((content) => {
        content?.classList.add("hidden");
      });
    };

    const showCardContent = (cardContent: HTMLElement | null) => {
      hideCardContents();
      cardContent?.classList.remove("hidden");
    };

    let isTransitioning: boolean = false;

    const updateSlideState = () => {
      if (isTransitioning) return;
      isTransitioning = true;

      const isOpening = slide.classList.contains("translate-x-full");

      slide.classList.toggle("translate-x-0", isOpening);
      slide.classList.toggle("translate-x-full", !isOpening);
      overlay.classList.toggle("hidden", !isOpening);
      overlay.classList.toggle("visible", isOpening);

      if (isOpening) {
        setTimeout(() => {
          xBtn.style.display = "flex";
          isTransitioning = false;
        }, 300);
      } else {
        xBtn.style.display = "none";
        slide.addEventListener(
          "transitionend",
          () => {
            hideCardContents();
            isTransitioning = false;
          },
          { once: true }
        );
      }
    };

    const handleToggleClick = (event: MouseEvent) => {
      if ((event.target as HTMLElement).matches("[data-slide-toggle]")) {
        updateSlideState();
      }

      if (event.target === cardButtons.first) {
        showCardContent(cardContents.first);
      } else if (event.target === cardButtons.second) {
        showCardContent(cardContents.second);
      } else if (event.target === cardButtons.third) {
        showCardContent(cardContents.third);
      }
    };

    const cleanup = () => {
      document.removeEventListener("click", handleToggleClick);
      xBtn.removeEventListener("click", () => updateSlideState());
      overlay.removeEventListener("click", () => updateSlideState());
      isInitialized = false;
    };

    document.addEventListener("click", handleToggleClick);
    xBtn.addEventListener("click", () => updateSlideState());
    overlay.addEventListener("click", () => updateSlideState());

    document.addEventListener("astro:before-swap", cleanup);
  }

  document.addEventListener("DOMContentLoaded", initSlidePanel);
  document.addEventListener("astro:after-swap", initSlidePanel);
</script>
